build_root:
  image_stream_tag:
    name: release
    namespace: openshift
    tag: golang-1.20
images:
- dockerfile_literal: |-
    FROM src
    ENV SHELLCHECK_VERSION=0.7.1
    ENV YQ_VERSION=v4.25.2
    ENV TEKTONCD_CLI_VERSION="v0.33.0"
    RUN dnf install -y -q --allowerasing --nobest nodejs-devel nodejs-libs python3-pip jq \
    # already installed or installed as deps:
    openssl openssl-devel ca-certificates make cmake cpp gcc gcc-c++ zlib zlib-devel brotli brotli-devel python3 nodejs-packaging && \
    pip3 install --upgrade pip && \
    pip3 install --upgrade setuptools && \
    pip3 install yq && \
    dnf update -y && dnf clean all && \
    npm install -g yarn@1.22 npm@9 && \
    echo -n "node version: "; node -v; \
    echo -n "npm  version: "; npm -v; \
    echo -n "yarn version: "; yarn -v

    # Install yamllint, shellcheck, yq, heml
    RUN pip3 install --upgrade setuptools pip && \
        pip3 install yamllint && yamllint --version && \
        curl --fail -sSL  https://github.com/koalaman/shellcheck/releases/download/v$SHELLCHECK_VERSION/shellcheck-v$SHELLCHECK_VERSION.linux.x86_64.tar.xz | tar -xJvf - shellcheck-v$SHELLCHECK_VERSION/shellcheck && \
        mv shellcheck-v$SHELLCHECK_VERSION/shellcheck /usr/local/bin/shellcheck && chmod 755 /usr/local/bin/shellcheck && rm -rf "shellcheck-v$SHELLCHECK_VERSION" && \
        curl -Lso /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 && chmod +x /usr/local/bin/yq && \
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod 700 get_helm.sh && ./get_helm.sh && rm -rf get_helm.sh && \
        curl -fsSL -o tkn.tgz "https://github.com/tektoncd/cli/releases/download/${TEKTONCD_CLI_VERSION}/tkn_${TEKTONCD_CLI_VERSION:1}_Linux_x86_64.tar.gz" && tar -C "/usr/local/bin" --no-same-owner -xzf "tkn.tgz" tkn && rm -rf "tkn.tgz"
  from: src
  to: rhtap-installer
promotion:
  to:
  - name: redhat-appstudio
    namespace: ci
releases:
  latest:
    release:
      architecture: amd64
      channel: fast
      version: "4.14"
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: nightly
  cron: 0 0 * * *
  steps:
    test:
    - as: stage-environment-update
      cli: latest
      commands: |
        export OPENSHIFT_LOGIN_USERNAME="$(cat /usr/local/ci-secrets/rhtap-stage-secrets/openshift_login_username)"
        export OPENSHIFT_LOGIN_PASSWORD="$(cat /usr/local/ci-secrets/rhtap-stage-secrets/openshift_login_password)"
        export OPENSHIFT_API_URL="$(cat /usr/local/ci-secrets/rhtap-stage-secrets/openshift_api_url)"
        source /usr/local/ci-secrets/rhtap-stage-secrets/stage-secrets-environments
        unset KUBECONFIG

        # Login to Staging Openshift Cluster
        oc login -u "${OPENSHIFT_LOGIN_USERNAME}" -p "${OPENSHIFT_LOGIN_PASSWORD}" "${OPENSHIFT_API_URL}" --insecure-skip-tls-verify=true

        # Remove previous installation
        oc delete namespace rhtap

        # Run the installation in debug mode
        ./bin/make.sh values
        yq e -i '.debug.script=true' private-values.yaml
        yq e -i '.trusted-profile-analyzer=null' private-values.yaml
        ./bin/make.sh apply -n rhtap -- --debug --values private-values.yaml
      credentials:
      - mount_path: /usr/local/ci-secrets/rhtap-stage-secrets
        name: rhtap-stage-secrets
        namespace: test-credentials
      from: rhtap-installer
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
- as: rhtap-installer-shellcheck
  commands: |
    #!/usr/bin/env bash
    set -o errexit
    set -o nounset
    set -o pipefail
    find . -type f -name "*.sh" -print0 | xargs -r -0 shellcheck
  container:
    from: rhtap-installer
- as: rhtap-installer-yamllint
  commands: |
    #!/usr/bin/env bash
    set -o errexit
    set -o nounset
    set -o pipefail

    CONFIG_FILE="ci/config/yamllint.yaml"

    yamllint -c "$CONFIG_FILE" .
  container:
    from: rhtap-installer
  optional: true
- as: rhtap-dump-external-resources
  cron: 0 */24 * * *
  steps:
    test:
    - ref: redhat-appstudio-rhtap-installer-sprayproxy-cleanup
- as: rhtap-installer-e2e
  cluster_claim:
    architecture: amd64
    cloud: aws
    labels:
      region: us-east-2
    owner: rhtap
    product: ocp
    timeout: 1h0m0s
    version: "4.14"
  skip_if_only_changed: ^docs/|^\.github/|^\.tekton/|\.md$|^tests/release/pipelines/|^tests/load-tests/|^cmd/loadTests.go$|^(?:.*/)?(?:\.gitignore|OWNERS|OWNERS_ALIASES|PROJECT|LICENSE)$
  steps:
    test:
    - ref: redhat-appstudio-rhtap-installer-e2e-test
    workflow: redhat-appstudio-rhtap-installer
zz_generated_metadata:
  branch: main
  org: redhat-appstudio
  repo: rhtap-installer
